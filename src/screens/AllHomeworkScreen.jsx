import React, { useEffect, useState } from "react";
import { collection, onSnapshot } from "firebase/firestore";
import { db } from "../firebase";
import jsPDF from "jspdf";
import "jspdf-autotable";
import { Pie } from "react-chartjs-2";
import { Chart, ArcElement, Tooltip, Legend } from "chart.js";
Chart.register(ArcElement, Tooltip, Legend);
import "./allhomework.css";

export default function AllHomeworkScreen() {
  const [allTasks, setAllTasks] = useState([]);

  useEffect(() => {
    const unsub = onSnapshot(collection(db, "homework"), (snapshot) => {
      const data = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      setAllTasks(data);
    });
    return () => unsub();
  }, []);

  const exportToPDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(16);
    doc.text("–í—Å–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", 14, 16);
    doc.autoTable({
      startY: 20,
      head: [["–°—Ç—É–¥–µ–Ω—Ç", "–ü—Ä–µ–¥–º–µ—Ç", "–°—Ä–æ–∫", "–°—Ç–∞—Ç—É—Å", "–§–∞–π–ª"]],
      body: allTasks.map((task) => [
        task.student || "‚Äî",
        task.subject,
        task.deadline,
        getLabel(task.status),
        task.fileUrl ? "–°—Å—ã–ª–∫–∞ –µ—Å—Ç—å" : "‚Äî"
      ]),
    });
    doc.save("homework-report.pdf");
  };

  const statusStats = {
    done: allTasks.filter((t) => t.status === "done").length,
    "in-progress": allTasks.filter((t) => t.status === "in-progress").length,
    overdue: allTasks.filter((t) => t.status === "overdue").length,
  };

  const pieData = {
    labels: ["–í—ã–ø–æ–ª–Ω–µ–Ω–æ", "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"],
    datasets: [
      {
        label: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        data: [statusStats.done, statusStats["in-progress"], statusStats.overdue],
        backgroundColor: ["#28a745", "#ffc107", "#dc3545"],
        borderWidth: 1,
      },
    ],
  };

  return (
    <div className="content all-homework">
      <h2>–í—Å–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</h2>

      <div className="action-buttons">
        <button onClick={exportToPDF}>üìÑ –°–∫–∞—á–∞—Ç—å PDF</button>
      </div>

      {/* üìä –ì—Ä–∞—Ñ–∏–∫ */}
      <div className="chart-container">
        <h4>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É</h4>
        <Pie data={pieData} />
      </div>

      {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ */}
      <table className="hw-table">
        <thead>
          <tr>
            <th>–°—Ç—É–¥–µ–Ω—Ç</th>
            <th>–ü—Ä–µ–¥–º–µ—Ç</th>
            <th>–°—Ä–æ–∫</th>
            <th>–°—Ç–∞—Ç—É—Å</th>
            <th>–§–∞–π–ª</th>
          </tr>
        </thead>
        <tbody>
          {allTasks.map((task) => (
            <tr key={task.id}>
              <td>{task.student}</td>
              <td>{task.subject}</td>
              <td>{task.deadline}</td>
              <td className={`status ${task.status}`}>{getLabel(task.status)}</td>
              <td>
                {task.fileUrl ? (
                  <a href={task.fileUrl} target="_blank" rel="noreferrer">üìé –°–∫–∞—á–∞—Ç—å</a>
                ) : (
                  "‚Äî"
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* –ú–æ–±–∏–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <div className="mobile-cards">
        {allTasks.map((task) => (
          <div key={task.id} className="homework-card">
            <div className="homework-card-header">
              <div className="homework-card-title">{task.subject}</div>
              <div className={`homework-card-status status ${task.status}`}>
                {getLabel(task.status)}
              </div>
            </div>
            <div className="homework-card-details">
              <div className="homework-card-detail">
                <span className="homework-card-label">–°—Ç—É–¥–µ–Ω—Ç:</span>
                <span className="homework-card-value">{task.student || "‚Äî"}</span>
              </div>
              <div className="homework-card-detail">
                <span className="homework-card-label">–°—Ä–æ–∫:</span>
                <span className="homework-card-value">{task.deadline}</span>
              </div>
              <div className="homework-card-detail">
                <span className="homework-card-label">–§–∞–π–ª:</span>
                <span className="homework-card-value">
                  {task.fileUrl ? (
                    <a href={task.fileUrl} target="_blank" rel="noreferrer">üìé –°–∫–∞—á–∞—Ç—å</a>
                  ) : (
                    "‚Äî"
                  )}
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

function getLabel(status) {
  switch (status) {
    case "done":
      return "–í—ã–ø–æ–ª–Ω–µ–Ω–æ";
    case "in-progress":
      return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ";
    case "overdue":
      return "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ";
    default:
      return "‚Äî";
  }
}
